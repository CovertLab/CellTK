"""
python celltk/postprocess.py -f gap_closing -i c0/img_00000000* -l c2/img_00000000*  -o c3 -p DISPLACEMENT=30
"""

from scipy.ndimage import imread
import argparse
import tifffile as tiff
from os.path import basename, join
import numpy as np
import os
import postprocess_operation
import ast
from utils.postprocess_utils import regionprops # set default parent and next as None


def make_dirs(path):
    try:
        os.makedirs(path)
    except OSError:
        if not os.path.isdir(path):
            raise


def neg2poslabels(labels):
    maxint = labels.max()
    negatives = np.unique(labels[labels < 0])
    for i in negatives:
        maxint += 1
        labels[labels == i] = maxint
    return labels


def cells2labels(cells, frame, shape):
    inframe = [i for i in cells if i.frame == frame]
    template = np.zeros(shape)
    for cell in inframe:
        for c0, c1 in cell.coords:
            template[c0, c1] = cell.label
    return template


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-i", "--input", help="images", nargs="+")
    parser.add_argument("-l", "--labels", help="labels", nargs="+")
    parser.add_argument("-o", "--output", help="output directory", type=str, default='temp')
    parser.add_argument("-f", "--functions", help="functions", nargs="+")
    parser.add_argument("-p", "--param", nargs="*", help="parameters", type=lambda kv: kv.split("="))
    args = parser.parse_args()
    make_dirs(args.output)
    param = dict(args.param)
    for key, value in param.iteritems():
        param[key] = ast.literal_eval(value)

    store = []
    for frame, (path, pathl) in enumerate(zip(args.input, args.labels)):
        img, labels = imread(path), imread(pathl).astype(np.int32)
        cells = regionprops(labels, img)
        for cell in cells:
            cell.frame = frame
            if frame > 0:
                all_labels = [i.label for i in store[frame - 1]]
                if cell.label in all_labels:
                    store[frame - 1][all_labels.index(cell.label)].next = cell
        store.append(cells)
    cells = [i for j in store for i in j]
    # Each function receives cells (regionprops) and finally return labels generated by cells.label

    for function in args.functions:
        func = getattr(postprocess_operation, function)
        cells = func(cells, **param)

    for frame, (path, pathl) in enumerate(zip(args.input, args.labels)):
        labels = cells2labels(cells, frame, imread(path).shape)
        tiff.imsave(join(args.output, basename(path)), labels.astype(np.int32))


if __name__ == "__main__":
    main()
